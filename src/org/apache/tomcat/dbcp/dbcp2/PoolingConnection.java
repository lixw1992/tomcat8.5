package org.apache.tomcat.dbcp.dbcp2;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.NoSuchElementException;

import org.apache.tomcat.dbcp.pool2.KeyedObjectPool;
import org.apache.tomcat.dbcp.pool2.KeyedPooledObjectFactory;
import org.apache.tomcat.dbcp.pool2.PooledObject;
import org.apache.tomcat.dbcp.pool2.impl.DefaultPooledObject;

/**
 * 池化{@link PreparedStatement}的 {@link DelegatingConnection}.
 * <p>
 * {@link #prepareStatement} 和 {@link #prepareCall} 方法, 不是每次都创建一个新的 PreparedStatement, 实际上可能会从未使用的语句池中提取语句.
 * 返回的语句的{@link PreparedStatement#close}方法不会真的关闭语句, 而是将其返回到池中.
 * (See {@link PoolablePreparedStatement}, {@link PoolableCallableStatement}.)
 */
public class PoolingConnection extends DelegatingConnection<Connection>
        implements KeyedPooledObjectFactory<PStmtKey,DelegatingPreparedStatement> {

    /**
     * {@link PreparedStatement}的池. 和 {@link CallableStatement}s
     */
    private KeyedObjectPool<PStmtKey,DelegatingPreparedStatement> _pstmtPool = null;

    /**
     * @param c 底层{@link Connection}.
     */
    public PoolingConnection(final Connection c) {
        super(c);
    }


    public void setStatementPool(
            final KeyedObjectPool<PStmtKey,DelegatingPreparedStatement> pool) {
        _pstmtPool = pool;
    }


    /**
     * 从池中关闭并释放所有的{@link PreparedStatement} 或{@link CallableStatement}, 并关闭底层的连接.
     */
    @Override
    public synchronized void close() throws SQLException {
        try {
            if (null != _pstmtPool) {
                final KeyedObjectPool<PStmtKey,DelegatingPreparedStatement> oldpool = _pstmtPool;
                _pstmtPool = null;
                try {
                    oldpool.close();
                } catch(final RuntimeException e) {
                    throw e;
                } catch(final Exception e) {
                    throw new SQLException("Cannot close connection", e);
                }
            }
        } finally {
            try {
                getDelegateInternal().close();
            } finally {
                setClosedInternal(true);
            }
        }
    }

    /**
     * 从池中创建并获取一个{@link PreparedStatement}.
     * @param sql 用于定义PreparedStatement的sql字符串
     * @return a {@link PoolablePreparedStatement}
     */
    @Override
    public PreparedStatement prepareStatement(final String sql) throws SQLException {
        if (null == _pstmtPool) {
            throw new SQLException(
                    "Statement pool is null - closed or invalid PoolingConnection.");
        }
        try {
            return _pstmtPool.borrowObject(createKey(sql));
        } catch(final NoSuchElementException e) {
            throw new SQLException("MaxOpenPreparedStatements limit reached", e);
        } catch(final RuntimeException e) {
            throw e;
        } catch(final Exception e) {
            throw new SQLException("Borrow prepareStatement from pool failed", e);
        }
    }

    @Override
    public PreparedStatement prepareStatement(final String sql, final int autoGeneratedKeys) throws SQLException {
        if (null == _pstmtPool) {
            throw new SQLException(
                    "Statement pool is null - closed or invalid PoolingConnection.");
        }
        try {
            return _pstmtPool.borrowObject(createKey(sql, autoGeneratedKeys));
        }
        catch (final NoSuchElementException e) {
            throw new SQLException("MaxOpenPreparedStatements limit reached", e);
        }
        catch (final RuntimeException e) {
            throw e;
        }
        catch (final Exception e) {
            throw new SQLException("Borrow prepareStatement from pool failed", e);
        }
    }

    /**
     * 从池中创建或获取{@link PreparedStatement}.
     * 
     * @param sql 用于定义PreparedStatement的sql字符串
     * @param resultSetType 结果集类型
     * @param resultSetConcurrency 结果集并发
     * 
     * @return a {@link PoolablePreparedStatement}
     * @throws SQLException 发生错误
     */
    @Override
    public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency) throws SQLException {
        if (null == _pstmtPool) {
            throw new SQLException(
                    "Statement pool is null - closed or invalid PoolingConnection.");
        }
        try {
            return _pstmtPool.borrowObject(createKey(sql,resultSetType,resultSetConcurrency));
        } catch(final NoSuchElementException e) {
            throw new SQLException("MaxOpenPreparedStatements limit reached", e);
        } catch(final RuntimeException e) {
            throw e;
        } catch(final Exception e) {
            throw new SQLException("Borrow prepareStatement from pool failed", e);
        }
    }

    /**
     * 从池中创建或获取{@link CallableStatement}.
     * @param sql 用于定义CallableStatement的sql字符串
     * @return a {@link PoolableCallableStatement}
     * @throws SQLException 发生错误
     */
    @Override
    public CallableStatement prepareCall(final String sql) throws SQLException {
        try {
            return (CallableStatement) _pstmtPool.borrowObject(createKey(sql, StatementType.CALLABLE_STATEMENT));
        } catch (final NoSuchElementException e) {
            throw new SQLException("MaxOpenCallableStatements limit reached", e);
        } catch (final RuntimeException e) {
            throw e;
        } catch (final Exception e) {
            throw new SQLException("Borrow callableStatement from pool failed", e);
        }
    }

    /**
     * 从池中创建或获取{@link CallableStatement}.
     * @param sql 用于定义CallableStatement的sql字符串
     * @param resultSetType 结果集类型
     * @param resultSetConcurrency 结果集并发
     * 
     * @return a {@link PoolableCallableStatement}
     * @throws SQLException 发生错误
     */
    @Override
    public CallableStatement prepareCall(final String sql, final int resultSetType, final int resultSetConcurrency) throws SQLException {
        try {
            return (CallableStatement) _pstmtPool.borrowObject(createKey(sql, resultSetType,
                            resultSetConcurrency, StatementType.CALLABLE_STATEMENT));
        } catch (final NoSuchElementException e) {
            throw new SQLException("MaxOpenCallableStatements limit reached", e);
        } catch (final RuntimeException e) {
            throw e;
        } catch (final Exception e) {
            throw new SQLException("Borrow callableStatement from pool failed", e);
        }
    }


//    TODO: possible enhancement, cache these preparedStatements as well

//    public PreparedStatement prepareStatement(String sql, int resultSetType,
//                                              int resultSetConcurrency,
//                                              int resultSetHoldability)
//        throws SQLException {
//        return super.prepareStatement(
//            sql, resultSetType, resultSetConcurrency, resultSetHoldability);
//    }
//
//    public PreparedStatement prepareStatement(String sql, int columnIndexes[])
//        throws SQLException {
//        return super.prepareStatement(sql, columnIndexes);
//    }
//
//    public PreparedStatement prepareStatement(String sql, String columnNames[])
//        throws SQLException {
//        return super.prepareStatement(sql, columnNames);
//    }

    protected PStmtKey createKey(final String sql, final int autoGeneratedKeys) {
        String catalog = null;
        try {
            catalog = getCatalog();
        } catch (final SQLException e) {
            // Ignored
        }
        return new PStmtKey(normalizeSQL(sql), catalog, autoGeneratedKeys);
    }

    /**
     * 为给定的参数创建PStmtKey.
     * @param sql 用于定义语句的sql字符串
     * @param resultSetType 结果集类型
     * @param resultSetConcurrency 结果集并发
     * 
     * @return the key
     */
    protected PStmtKey createKey(final String sql, final int resultSetType, final int resultSetConcurrency) {
        String catalog = null;
        try {
            catalog = getCatalog();
        } catch (final SQLException e) {
            // Ignored
        }
        return new PStmtKey(normalizeSQL(sql), catalog, resultSetType, resultSetConcurrency);
    }

    /**
     * 为给定的参数创建PStmtKey.
     * 
     * @param sql 用于定义语句的sql字符串
     * @param resultSetType 结果集类型
     * @param resultSetConcurrency 结果集并发
     * @param stmtType 语句类型
     * 
     * @return the key
     */
    protected PStmtKey createKey(final String sql, final int resultSetType, final int resultSetConcurrency, final StatementType stmtType) {
        String catalog = null;
        try {
            catalog = getCatalog();
        } catch (final SQLException e) {
            // Ignored
        }
        return new PStmtKey(normalizeSQL(sql), catalog, resultSetType, resultSetConcurrency, stmtType);
    }

    /**
     * 为给定的参数创建PStmtKey.
     * 
     * @param sql 用于定义语句的sql字符串
     * 
     * @return the key
     */
    protected PStmtKey createKey(final String sql) {
        String catalog = null;
        try {
            catalog = getCatalog();
        } catch (final SQLException e) {
            // Ignored
        }
        return new PStmtKey(normalizeSQL(sql), catalog);
    }

    /**
     * 为给定的参数创建PStmtKey.
     * 
     * @param sql 用于定义语句的SQL字符串
     * @param stmtType 语句类型
     * 
     * @return the key
     */
    protected PStmtKey createKey(final String sql, final StatementType stmtType) {
        String catalog = null;
        try {
            catalog = getCatalog();
        } catch (final SQLException e) {
            // Ignored
        }
        return new PStmtKey(normalizeSQL(sql), catalog, stmtType, null);
    }

    /**
     * 规范化给定的SQL语句, 产生一种在语义上等同于原始形式的规范形式.
     * 
     * @param sql SQL语句
     * @return 修剪后的SQL语句
     */
    protected String normalizeSQL(final String sql) {
        return sql.trim();
    }

    /**
     * 用于创建{@link PoolablePreparedStatement}或{@link PoolableCallableStatement}的{@link KeyedPooledObjectFactory}方法.
     * key中的<code> stmtType </code>字段确定是否创建了PoolablePreparedStatement或PoolableCallableStatement.
     *
     * @param key 要创建{@link PreparedStatement}的 key
     * @return the object
     * @throws Exception 发生错误
     */
    @Override
    public PooledObject<DelegatingPreparedStatement> makeObject(final PStmtKey key)
            throws Exception {
        if(null == key) {
            throw new IllegalArgumentException("Prepared statement key is null or invalid.");
        }
        if (null == key.getResultSetType() && null == key.getResultSetConcurrency() && null == key.getAutoGeneratedKeys()) {
            if (key.getStmtType() == StatementType.PREPARED_STATEMENT ) {
                @SuppressWarnings({"rawtypes", "unchecked"}) // 无法找到避免这种情况的方法
                final
                PoolablePreparedStatement pps = new PoolablePreparedStatement(
                        getDelegate().prepareStatement(key.getSql()), key, _pstmtPool, this);
                return new DefaultPooledObject<DelegatingPreparedStatement>(pps);
            }
            return new DefaultPooledObject<DelegatingPreparedStatement>(
                    new PoolableCallableStatement(getDelegate().prepareCall( key.getSql()), key, _pstmtPool, this));
        } else if (null == key.getResultSetType() && null == key.getResultSetConcurrency()){
            @SuppressWarnings({"rawtypes", "unchecked"}) // 无法找到避免这种情况的方法
            final
            PoolablePreparedStatement pps = new PoolablePreparedStatement(
                    getDelegate().prepareStatement(key.getSql(), key.getAutoGeneratedKeys().intValue()), key, _pstmtPool, this);
            return new DefaultPooledObject<DelegatingPreparedStatement>(pps);
        } else { // Both _resultSetType and _resultSetConcurrency are non-null here (两者或两者都不是由构造函数设置的)
            if(key.getStmtType() == StatementType.PREPARED_STATEMENT) {
                @SuppressWarnings({"rawtypes", "unchecked"}) // 无法找到避免这种情况的方法
                final
                PoolablePreparedStatement pps = new PoolablePreparedStatement(getDelegate().prepareStatement(
                        key.getSql(), key.getResultSetType().intValue(),key.getResultSetConcurrency().intValue()), key, _pstmtPool, this);
                return new DefaultPooledObject<DelegatingPreparedStatement>(pps);
            }
            return new DefaultPooledObject<DelegatingPreparedStatement>(
                    new PoolableCallableStatement( getDelegate().prepareCall(
                            key.getSql(),key.getResultSetType().intValue(), key.getResultSetConcurrency().intValue()), key, _pstmtPool, this));
        }
    }

    /**
     * 用于销毁PoolablePreparedStatements 和 PoolableCallableStatements的{@link KeyedPooledObjectFactory}方法.
     * 关闭底层语句.
     *
     * @param key ignored
     * @param p 要销毁的包装的池化的语句
     * @throws Exception 发生错误
     */
    @Override
    public void destroyObject(final PStmtKey key,
            final PooledObject<DelegatingPreparedStatement> p)
            throws Exception {
        p.getObject().getInnermostDelegate().close();
    }

    /**
     * 用于验证池化语句的{@link KeyedPooledObjectFactory}方法. 当前总是返回 true.
     *
     * @param key ignored
     * @param p ignored
     * @return {@code true}
     */
    @Override
    public boolean validateObject(final PStmtKey key,
            final PooledObject<DelegatingPreparedStatement> p) {
        return true;
    }

    /**
     * 用于激活池化语句的{@link KeyedPooledObjectFactory}方法.
     *
     * @param key ignored
     * @param p 要激活的包装的池化的语句
     * @throws Exception 发生错误
     */
    @Override
    public void activateObject(final PStmtKey key,
            final PooledObject<DelegatingPreparedStatement> p) throws Exception {
        p.getObject().activate();
    }

    /**
     * 用于钝化{@link PreparedStatement}或{@link CallableStatement}的{@link KeyedPooledObjectFactory}方法.
     * 调用 {@link PreparedStatement#clearParameters}.
     *
     * @param key ignored
     * @param p 包装的 {@link PreparedStatement}
     * @throws Exception 发生错误
     */
    @Override
    public void passivateObject(final PStmtKey key,
            final PooledObject<DelegatingPreparedStatement> p) throws Exception {
        final DelegatingPreparedStatement dps = p.getObject();
        dps.clearParameters();
        dps.passivate();
    }

    @Override
    public String toString() {
        if (_pstmtPool != null ) {
            return "PoolingConnection: " + _pstmtPool.toString();
        }
        return "PoolingConnection: null";
    }

    /**
     * 可能的语句类型.
     */
    protected static enum StatementType {
        CALLABLE_STATEMENT,
        PREPARED_STATEMENT
    }
}
